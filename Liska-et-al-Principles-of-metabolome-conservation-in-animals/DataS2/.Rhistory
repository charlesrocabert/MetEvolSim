alpha_effect(1, 0)
alpha_effect <- function( sigma, alpha )
{
depth  = seq(0, 1, by=0.01)
alphaf = c()
for (dp in depth)
{
if (alpha > 0)
{
alphaf = c(alphaf, sigma*(1-alpha)^dp)
}
if (alpha < 0)
{
alphaf = c(alphaf, sigma*(1-abs(alpha))^(1-dp))
}
if (alpha == 0)
{
alphaf = c(alphaf, sigma)
}
}
plot(depth, alphaf)
}
alpha_effect(1, 0)
alpha_effect(1, 1)
alpha_effect(1, -1)
alpha_effect(1, 0.2)
alpha_effect(1, 0.5)
alpha_effect(1, 0.2)
alpha_effect(1, 0.9)
alpha_effect(1, 0.99)
alpha_effect(1, 0.9999)
alpha_effect <- function( sigma, alpha )
{
depth  = seq(0, 100)
alphaf = c()
for (dp in depth)
{
if (alpha > 0)
{
alphaf = c(alphaf, sigma*(1-alpha)^dp)
}
if (alpha < 0)
{
alphaf = c(alphaf, sigma*(1-abs(alpha))^(1-dp))
}
if (alpha == 0)
{
alphaf = c(alphaf, sigma)
}
}
plot(depth, alphaf)
}
alpha_effect(1, 0.9999)
alpha_effect(1, 0.5)
alpha_effect(1, 0.1)
alpha_effect(1, 0)
alpha_effect(1, 0.01)
alpha_effect(1, 0.1)
alpha_effect(1, -0.1)
alpha_effect <- function( sigma, alpha )
{
depth  = seq(0, 1, by=0.01)
alphaf = c()
for (dp in depth)
{
if (alpha > 0)
{
alphaf = c(alphaf, sigma*(1-alpha)^dp)
}
if (alpha < 0)
{
alphaf = c(alphaf, sigma*(1-abs(alpha))^(1-dp))
}
if (alpha == 0)
{
alphaf = c(alphaf, sigma)
}
}
plot(depth, alphaf)
}
alpha_effect(1, -0.1)
alpha_effect(1, -0.2)
alpha_effect(1, -0.5)
alpha_effect(1, -0.8)
alpha_effect(1, -0.9)
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
for(alpha in seq(-1, 1, by=0.01))
{
lines(alpha_effect(1, alpha))
}
plot(X=NULL, xlim=c(0,1), ylim=c(0,1))
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
alpha_effect <- function( sigma, alpha )
{
depth  = seq(0, 1, by=0.01)
alphaf = c()
for (dp in depth)
{
if (alpha > 0)
{
alphaf = c(alphaf, sigma*(1-alpha)^dp)
}
if (alpha < 0)
{
alphaf = c(alphaf, sigma*(1-abs(alpha))^(1-dp))
}
if (alpha == 0)
{
alphaf = c(alphaf, sigma)
}
}
lines(depth, alphaf)
}
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
for(alpha in seq(-1, 1, by=0.01))
{
alpha_effect(1, alpha)
}
alpha_effect_2 <- function( sigma, alpha )
{
depth  = seq(0, 1, by=0.01)
upterm = depth*(1-alpha)
downterm = alpha*(1-depth)
t1 = (upterm/downterm)^(-1)
t2 = (1+t1)^(-1)
alphaf = t1
lines(depth, alphaf)
}
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
for(alpha in seq(-1, 1, by=0.1))
{
alpha_effect_2(1, alpha)
}
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
for(alpha in seq(0, 1, by=0.1))
{
alpha_effect_2(1, alpha)
}
alpha_effect_2(1, 1)
alpha_effect_2 <- function( sigma, alpha )
{
depth  = seq(0, 1, by=0.01)
upterm = depth*(1-alpha)
downterm = alpha*(1-depth)
t1 = (upterm/downterm)^(-1)
t2 = (1+t1)^(-1)
alphaf = t1
plot(depth, alphaf)
}
alpha_effect_2(1, 1)
alpha_effect_2 <- function( sigma, alpha )
{
x  = seq(0, 1, by=0.01)
upterm = x*(1-alpha)
downterm = alpha*(1-x)
t1 = (upterm/downterm)^(-1)
t2 = (1+t1)^(-1)
alphaf = t1
plot(depth, alphaf)
}
# plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
# for(alpha in seq(0, 1, by=0.1))
# {
#   alpha_effect_2(1, alpha)
# }
alpha_effect_2(1, 1)
alpha_effect_2 <- function( sigma, alpha )
{
x  = seq(0, 1, by=0.01)
upterm = x*(1-alpha)
downterm = alpha*(1-x)
t1 = (upterm/downterm)^(-1)
t2 = (1+t1)^(-1)
alphaf = t1
plot(x, alphaf)
}
# plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
# for(alpha in seq(0, 1, by=0.1))
# {
#   alpha_effect_2(1, alpha)
# }
alpha_effect_2(1, 1)
alpha_effect_2 <- function( sigma, alpha )
{
x  = seq(0, 1, by=0.01)
upterm = x*(1-alpha)
downterm = alpha*(1-x)
t1 = (upterm/downterm)^(-1)
t2 = (1+t1)^(-1)
alphaf = t1
print(alphaf)
plot(x, alphaf)
}
# plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
# for(alpha in seq(0, 1, by=0.1))
# {
#   alpha_effect_2(1, alpha)
# }
alpha_effect_2(1, 1)
alpha_effect_2 <- function( sigma, alpha )
{
x  = seq(0, 1, by=0.01)
upterm = x*(1-alpha)
downterm = alpha*(1-x)
t1 = (upterm/downterm)^(-1)
t2 = (1+t1)^(-1)
alphaf = t1
print(alphaf)
plot(x, alphaf)
}
# plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
# for(alpha in seq(0, 1, by=0.1))
# {
#   alpha_effect_2(1, alpha)
# }
alpha_effect_2(1, 0.5)
alpha_effect <- function( sigma, alpha )
{
depth  = seq(0, 1, by=0.01)
alphaf = c()
for (dp in depth)
{
if (alpha > 0)
{
alphaf = c(alphaf, sigma*(1-alpha)^dp)
}
if (alpha < 0)
{
alphaf = c(alphaf, sigma*(1-abs(alpha))^(1-dp))
}
if (alpha == 0)
{
alphaf = c(alphaf, sigma)
}
}
lines(depth, alphaf)
}
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
for(alpha in seq(-1, 1, by=0.1))
{
alpha_effect_2(1, alpha)
}
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
for(alpha in seq(-1, 1, by=0.1))
{
alpha_effect(1, alpha)
}
alpha_effect <- function( sigma, alpha )
{
depth  = seq(0, 1, by=0.01)
alphaf = c()
for (dp in depth)
{
if (alpha > 0)
{
alphaf = c(alphaf, sigma*(1-alpha)^dp)
}
if (alpha < 0)
{
alphaf = c(alphaf, sigma*(1-abs(alpha))^(1-dp))
}
if (alpha == 0)
{
alphaf = c(alphaf, sigma)
}
}
lines(depth, alphaf, log="y")
}
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
for(alpha in seq(-1, 1, by=0.1))
{
alpha_effect(1, alpha)
}
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
for(alpha in seq(-1, 1, by=0.1))
{
alpha_effect(1, alpha)
}
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
for(alpha in seq(-0.99, 0.99, by=0.1))
{
alpha_effect(1, alpha)
}
alpha_effect <- function( sigma, alpha )
{
depth  = seq(0, 1, by=0.01)
alphaf = c()
for (dp in depth)
{
if (alpha > 0)
{
alphaf = c(alphaf, sigma*(1-alpha)^dp)
}
if (alpha < 0)
{
alphaf = c(alphaf, sigma*(1-abs(alpha))^(1-dp))
}
if (alpha == 0)
{
alphaf = c(alphaf, sigma)
}
}
lines(depth, log10(alphaf))
}
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
for(alpha in seq(-0.99, 0.99, by=0.1))
{
alpha_effect(1, alpha)
}
plot(x=NULL, xlim=c(0,1), ylim=c(-10000,1))
for(alpha in seq(-0.99, 0.99, by=0.1))
{
alpha_effect(1, alpha)
}
plot(x=NULL, xlim=c(0,1), ylim=c(-100,0))
for(alpha in seq(-0.99, 0.99, by=0.1))
{
alpha_effect(1, alpha)
}
plot(x=NULL, xlim=c(0,1), ylim=c(-10,0))
for(alpha in seq(-0.99, 0.99, by=0.1))
{
alpha_effect(1, alpha)
}
plot(x=NULL, xlim=c(0,1), ylim=c(-2,0))
for(alpha in seq(-0.99, 0.99, by=0.1))
{
alpha_effect(1, alpha)
}
plot(x=NULL, xlim=c(0,1), ylim=c(-2,0))
for(alpha in seq(-0.99, 0.99, by=0.01))
{
alpha_effect(1, alpha)
}
plot(x=NULL, xlim=c(0,1), ylim=c(-2,0))
for(alpha in seq(-1, 1, by=0.01))
{
alpha_effect(1, alpha)
}
alpha_effect <- function( sigma, alpha )
{
depth  = seq(0, 1, by=0.01)
alphaf = c()
for (dp in depth)
{
if (alpha > 0)
{
alphaf = c(alphaf, sigma*(1-alpha)^dp)
}
if (alpha < 0)
{
alphaf = c(alphaf, sigma*(1-abs(alpha))^(1-dp))
}
if (alpha == 0)
{
alphaf = c(alphaf, sigma)
}
}
lines(depth, (alphaf))
}
plot(x=NULL, xlim=c(0,1), ylim=c(-2,0))
for(alpha in seq(-1, 1, by=0.01))
{
alpha_effect(1, alpha)
}
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
for(alpha in seq(-1, 1, by=0.01))
{
alpha_effect(1, alpha)
}
#!/usr/bin/env Rscript
#***************************************************************************
# Copyright © 2021-2022 Charles Rocabert, Frédéric Guillaume
# Web: https://github.com/charlesrocabert/Tribolium-Polygenic-Adaptation
#
# 2_split_bam_map.R
# -------------------
# Split the bam map into two files containing each complete version.
#***************************************************************************
WD_PATH = "/Users/charlesrocabert/git/Tribolium-Polygenic-Adaptation"
d = read.table(paste0(WD_PATH,"/data/tribolium_bam/bam_map_ALL.csv"), h=T, sep=";")
d = d[!is.na(d$fitness) & !is.na(d$sequencing_run),]
head(d)
head(d[,seq(1,10)])
head(d[,seq(1,11)])
head(d[,seq(1,10)])
#!/usr/bin/env Rscript
#***************************************************************************
# Copyright © 2021-2022 Charles Rocabert, Frédéric Guillaume
# Web: https://github.com/charlesrocabert/Tribolium-Polygenic-Adaptation
#
# 2_split_bam_map.R
# -------------------
# Split the bam map into two files containing each complete version.
#***************************************************************************
WD_PATH = "/Users/charlesrocabert/git/Tribolium-Polygenic-Adaptation"
d = read.table(paste0(WD_PATH,"/data/tribolium_bam/bam_map_ALL.csv"), h=T, sep=";")
d = d[!is.na(d$fitness) & !is.na(d$sequencing_run),]
###############################
# Tcas3.30 Version-2017-03-28 #
###############################
d1 = d[d$annotation=="Version-2016-02-11",]
d1 = d1[!duplicated(d1$sample),]
write.table(d1, file=paste0(WD_PATH,"/data/tribolium_bam/bam_map_Tcas3.30_ALL.csv"), quote=F, row.names=F, col.names=T, sep=";")
write.table(d1[d1$source_env=="CT" | d1$source_env=="HD",seq(1,10)], file=paste0(WD_PATH,"/data/tribolium_bam/bam_map_Tcas3.30.csv"), quote=F, row.names=F, col.names=T, sep=";")
##############################
# Tcas5.2 Version-2017-03-28 #
##############################
d2 = d[d$annotation=="Version-2017-03-28",]
d2 = d2[!duplicated(d2$sample),]
write.table(d2, file=paste0(WD_PATH,"/data/tribolium_bam/bam_map_Tcas5.2_ALL.csv"), quote=F, row.names=F, col.names=T, sep=";")
print("toto\ntoto")
print("totototo")
88878*4*2+2*88878
install.packages(c("ade4", "adegenet", "BiocManager", "blob", "broom", "car", "caret", "checkmate", "cli", "CMplot", "deSolve", "dplyr", "eegkitdata", "ellipse", "ff", "future", "future.apply", "gap", "gdata", "geiger", "ggplot2", "globals", "gmodels", "gtools", "haven", "hierfstat", "httr", "igraph", "knitr", "lme4", "maptools", "MASS", "matrixStats", "network", "nloptr", "openssl", "parallelly", "phytools", "polynom", "ps", "quantmod", "quantreg", "RcppArmadillo", "RcppEigen", "reshape", "rgl", "rmarkdown", "roxygen2", "RSpectra", "RSQLite", "scales", "segmented", "seqinr", "sna", "sp", "statnet.common", "subplex", "testthat", "tibble", "tinytex", "tseries", "usethis", "uuid", "vctrs", "vegan", "VennDiagram", "webshot", "xfun", "zoo"))
#!/usr/bin/env Rscript
#***************************************************************************
# © 2018-2022 Charles Rocabert, Gábor Boross, Orsolya Liska, Balázs Papp
# Web: https://github.com/charlesrocabert/MetEvolSim
#
# plot_figure.R
# -------------
# Create the figure showing MCS with replicate noise.
#***************************************************************************
library("tidyverse")
library("cowplot")
##################
#      MAIN      #
##################
# Indicate here the location of the folder DataS2 on your computer.
#setwd(Path to DataS2)
setwd("/Users/charlesrocabert/git/MetEvolSim-development/Liska-et-al-Principles-of-metabolome-conservation-in-animals/DataS2")
#----------------------------------#
# 1) Load the list of lipids       #
#----------------------------------#
load('lipids.rdata')
d = read.table("ER_estimates.csv", sep=";", h=T)
d = d[!(d$Metabolite%in%lipid_list[lipid_list$lipidEvolRate==1,"name_evolRate"]),]
#----------------------------------#
# 2) Make figure for brain tissue  #
#----------------------------------#
df     = d[d$Tissue=="Brain",]
df$Rep = as.factor(df$Rep)
model  = lm(log10(1/df$ER)~(df$Metabolite))
R2     = summary(model)$r.squared
annot  = paste("One-way ANOVA test R-squared =", round(R2, 3))
p1     = ggplot(df, aes(x=reorder(Metabolite,log10(1/ER)), y=log10(1/ER))) +
geom_boxplot() +
annotate(geom="text", x=20, y=2, label=annot) +
xlab("") +
ylab("Metabolic conservation score (log-scale)") +
ggtitle("Brain (100 repetitions)") +
theme_classic() +
theme(legend.position="none", axis.text.x = element_text(angle=90, vjust=0.5, hjust=1))
#----------------------------------#
# 3) Make figure for heart tissue  #
#----------------------------------#
df     = d[d$Tissue=="Heart",]
df$Rep = as.factor(df$Rep)
model  = lm(log10(1/df$ER)~(df$Metabolite))
R2     = summary(model)$r.squared
annot  = paste("One-way ANOVA test R-squared =", round(R2, 3))
p2     = ggplot(df, aes(x=reorder(Metabolite,log10(1/ER)), y=log10(1/ER))) +
geom_boxplot() +
annotate(geom="text", x=20, y=2, label=annot) +
xlab("") +
ylab("Metabolic conservation score (log-scale)") +
ggtitle("Heart (100 repetitions)") +
theme_classic() +
theme(legend.position="none", axis.text.x=element_text(angle=90, vjust=0.5, hjust=1))
#----------------------------------#
# 4) Make figure for liver tissue  #
#----------------------------------#
df     = d[d$Tissue=="Liver",]
df$Rep = as.factor(df$Rep)
model  = lm(log10(1/df$ER)~(df$Metabolite))
R2     = summary(model)$r.squared
annot  = paste("One-way ANOVA test R-squared =", round(R2, 3))
p3     = ggplot(df, aes(x=reorder(Metabolite,log10(1/ER)), y=log10(1/ER))) +
geom_boxplot() +
annotate(geom="text", x=20, y=2, label=annot) +
xlab("") +
ylab("Metabolic conservation score (log-scale)") +
ggtitle("Liver (100 repetitions)") +
theme_classic() +
theme(legend.position="none", axis.text.x=element_text(angle=90, vjust=0.5, hjust=1))
#----------------------------------#
# 5) Make figure for kidney tissue #
#----------------------------------#
df     = d[d$Tissue=="Kidney",]
df$Rep = as.factor(df$Rep)
model  = lm(log10(1/df$ER)~(df$Metabolite))
R2     = summary(model)$r.squared
annot  = paste("One-way ANOVA test R-squared =", round(R2, 3))
p4     = ggplot(df, aes(x=reorder(Metabolite,log10(1/ER)), y=log10(1/ER))) +
geom_boxplot() +
annotate(geom="text", x=20, y=2, label=annot) +
xlab("") +
ylab("Metabolic conservation score (log-scale)") +
ggtitle("Kidney (100 repetitions)") +
theme_classic() +
theme(legend.position="none", axis.text.x=element_text(angle=90, vjust=0.5, hjust=1))
#----------------------------------#
# 6) Generate the final plot       #
#----------------------------------#
pA = plot_grid(p1, p2, ncol=1, labels=c("A", "B"), label_size=20)
pB = plot_grid(p3, p4, ncol=1, labels=c("C", "D"), label_size=20)
ggsave("ER_estimates_1.png", pA, dpi=600, bg="white", scale=1, width=13, height=20)
ggsave("ER_estimates_2.png", pB, dpi=600, bg="white", scale=1, width=13, height=20)
head(d)
hist(d$Rep)
unique(d$Rep)
